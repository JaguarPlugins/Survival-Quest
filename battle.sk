options:

    # Game rules
    game-min: 2
    team-size: 2
    lobby-wait: 10
    death-delay: 1 # Time before game ends after last death

    # Admin command messages
    perm-deny: "&CYou do not have permission to perform this command"
    lobby-set: "&ALobby location set"
    spawn-added: "&ASpawn location added"
    spawns-cleared: "&CSpawns cleared"
    world-created: "&AWorld created"
    world-exists: "&CWorld already exists"
    world-removed: "&CWorld removed"

    # Setup announcements
    lobby-join: "&AYou have joined the lobby"
    re-join: "&6You have already joined the lobby"

    # Game messages
    join: "&AGame started"
    death: "&CYou died!"
    friendly: "&6Stop hitting your own teammate!"
    shulker: "&CYou cannot destroy a loot box"

# Joining
on rightclick on sign:
    if 1st line of clicked block is "[Survival]":

        if {quest.lobby::*} does not contain player:
            teleport player to {quest.lobby-loc}
            add player to {quest.lobby::*}
            send {@lobby-join}
        else:
            send {@re-join}

# Leaving
function questLeave(p: player):
    
    set {_alive} to 0
    set {_w} to {_p}'s world

    loop {quest.maps::%{_w}%::alive::*}:
        remove {_p} from {quest.maps::%{_w}%::alive::%loop-index%::*}
        if (size of {quest.maps::%{_w}%::alive::%loop-index%::*}) > 0:
            add 1 to {_alive}
            set {_team} to loop-index parsed as integer

    if {_alive} is 1:
        questWin(({_team}), ({_p}'s world))

# Game ends & winning
function questWin(t: integer, w: world):

    set {_x} to {_w}.getWorldBorder().setSize({quest.maps::%{_w}%::border-start}, 1)

    wait {@death-delay} seconds

    send "Team %{_t}% wins!" to {quest.maps::%{_w}%::players::*}
    send "Members: %{quest.maps::%{_w}%::teams::%{_t}%::*}%" to {quest.maps::%{_w}%::players::*} 

    toggle scoreboard of {quest.maps::%{_w}%::players::*} off

    loop {quest.maps::%{_w}%::players::*}:
        add loop-value to {quest.lobby::*}

    clear inventory of {quest.maps::%{_w}%::players::*}
    teleport {quest.maps::%{_w}%::players::*} to {quest.lobby-loc}
    heal {quest.maps::%{_w}%::players::*}
    set gamemode of {quest.maps::%{_w}%::players::*} to survival

    questRegen({_w})

    # Clear variables
    loop {quest.maps::*}:
        clear {quest.maps::%loop-index-1%::players::*}    
        clear {quest.maps::%loop-index-1%::teams::*}
        clear {quest.maps::%loop-index-1%::alive::*}
        clear {quest.maps::%loop-index-1%::placed-locs::*}
        clear {quest.maps::%loop-index-1%::broken-blocks::*}   
        clear {quest.maps::%loop-index-1%::broken-locs::*}
        clear {quest.maps::%loop-index-1%::kills::*}

# Start Game
function startQuestGame(w: world):

    set time in {_w} to 12:00
    set {quest.maps::%{_w}%::time} to {quest.maps::%{_w}%::border-time}
    placeQuestLoot({_w})

    # Moving players from lobby to game
    set {_added} to 0
    set {_temp::*} to {quest.lobby::*}
    loop {_temp::*}:
        add loop-value to {quest.maps::%{_w}%::players::*}
        remove loop-value from {quest.lobby::*}
        add 1 to {_added}
        if {_added} >= {@game-min}:
            exit loop

    # Team selection
    set {_team} to 1
    set {_added-2} to 0
    set {_new-players::*} to {quest.maps::%{_w}%::players::*}
    loop integers between 1 and (size of {_new-players::*}):

        set {_new-players::*} to {_new-players::*}
        set {_i} to a random integer between 1 and (size of {_new-players::*})
        add {_new-players::%{_i}%} to {quest.maps::%{_w}%::teams::%{_team}%::*}
        send "you are in team %{_team}%" to {_new-players::%{_i}%}
        remove {_new-players::%{_i}%} from {_new-players::*}

        add 1 to {_added-2}
        if {_added-2} >= {@team-size}:
            add 1 to {_team}
            set {_added-2} to 0

    # Spawning in
    set {_spawns::*} to {quest.maps::%{_w}%::spawns::*}

    loop integers between 1 and ({@game-min} / {@team-size}):
        
        # Adding dummy data to index in list so that it works
        set {quest.maps::%{_w}%::alive::%loop-integer%} to loop-integer
        set {quest.maps::%{_w}%::alive::%loop-integer%::*} to {quest.maps::%{_w}%::teams::%loop-integer%::*}

        # Teleport to spawn location
        set {_spawns::*} to {_spawns::*}
        set {_i} to a random integer between 1 and (size of {_spawns::*})
        set {_loc} to {_spawns::%{_i}%}
        teleport {quest.maps::%{_w}%::teams::%loop-integer%::*} to {_loc}
        remove {_loc} from {_spawns::*}

    set gamemode of {quest.maps::%{_w}%::players::*} to survival
    feed {quest.maps::%{_w}%::players::*}
    heal {quest.maps::%{_w}%::players::*}
    clear inventory of {quest.maps::%{_w}%::players::*}
    send {@join} to {quest.maps::%{_w}%::players::*}

    clear scoreboard of {quest.maps::%{_w}%::players::*}
    updateQuestBoard({_w})
    toggle scoreboard of {quest.maps::%{_w}%::players::*} on

    set {_x} to {_w}.getWorldBorder().setSize(10, {quest.maps::%{_w}%::border-time})

# Game Timer
every second:

    # Countdown to start
    if size of {quest.lobby::*} >= {@game-min}:

        if {quest.lobby-timer} is {@lobby-wait}:

            startQuestGame({quest.next-match} parsed as world)

        else if {quest.lobby-timer} > 0:

            send "&b%({@lobby-wait} - {quest.lobby-timer})%" to {quest.lobby::*}
            add 1 to {quest.lobby-timer}

        else:

            loop {quest.maps::*}:
                if size of {quest.maps::%loop-index%::players::*} is 0:
                    if {quest.maps::%{_w}%::ready} is not false:

                        set {quest.next-match} to loop-index
                        send "&b%({@lobby-wait} - {quest.lobby-timer})%" to {quest.lobby::*}
                        set {quest.lobby-timer} to 1
                        exit loop

    else:

        set {quest.lobby-timer} to 0

    # Scoreboard Updating
    loop {quest.maps::*}:
        if {quest.maps::%loop-index%::time} > 0:
            remove 1 from {quest.maps::%loop-index%::time}
        updateQuestBoard(loop-index parsed as world)

# Damage
on damage:

    if {quest.maps::%victim's world%::players::*} contains victim:

        # Friendly fire
        loop {quest.maps::%victim's world%::alive::*}:
            if {quest.maps::%victim's world%::alive::%loop-index%::*} contains victim:
                if {quest.maps::%victim's world%::alive::%loop-index%::*} contains attacker:
                    
                    send {@friendly} to attacker
                    cancel event
                    stop

        # Death
        if damage >= victim's health:

            cancel event
            set victim's gamemode to spectator
            send victim title {@death}
            add 1 to {quest.maps::%attacker's world%::kills::%attacker%}
            send "&E%victim%&E died" to {quest.maps::%victim's world%::players::*}

            questLeave(victim) 

        updateQuestBoard(victim's world)

# Teammate revival
on rightclick holding totem of undying:
    if {quest.maps::%player's world%::players::*} contains player:
        
        loop integers between 1 and ({@game-min} / {@team-size}):
            if {quest.maps::%player's world%::teams::%loop-integer%::*} contains player:
                set {_team} to loop-integer
                exit loop
        
        if size of {quest.maps::%player's world%::teams::%{_team}%::*} < 2:
            send "&CThere's no-one to revive"
            stop

        if (size of {quest.maps::%player's world%::teams::%{_team}%::*}) = (size of {quest.maps::%player's world%::alive::%{_team}%::*}):
            send "&CThere's no-one to revive"
            stop
        
        set {_dead::*} to {quest.maps::%player's world%::teams::%{_team}%::*}
        loop {quest.maps::%player's world%::alive::%{_team}%::*}:
            remove loop-value from {_dead::*}

        set {_dead::*} to {_dead::*}
        set {_i} to a random integer between 1 and (size of {_dead::*})
        set {_ghost} to {_dead::%{_i}%}
        
        add {_ghost} to {quest.maps::%player's world%::alive::%{_team}%::*}
        feed {_ghost}
        heal {_ghost}
        teleport {_ghost} to player's location
        set gamemode of {_ghost} to survival

        remove totem of undying from player's inventory

        send {_ghost} title "&AWelcome back!"
        send "&E%{_ghost}% &Ewas revived by their team!" to {quest.maps::%player's world%::players::*}

# Blocks
on block break:
    if {quest.maps::%player's world%::players::*} contains player:

        if block is a light gray shulker box:
            send {@shulker}
            cancel event
            stop
        if block is a lime shulker box:
            send {@shulker}
            cancel event
            stop
        if block is a light blue shulker box:
            send {@shulker}
            cancel event
            stop
        if block is a purple shulker box:
            send {@shulker}
            cancel event
            stop
        if block is a orange shulker box:
            send {@shulker}
            cancel event
            stop

        if {quest.maps::%player's world%::broken-locs::*} does not contain (block's location):
            if {quest.maps::%player's world%::placed-locs::*} does not contain (block's location):
                add type of block to {quest.maps::%player's world%::broken-blocks::*}
                add block's location to {quest.maps::%player's world%::broken-locs::*}

on block place:
    if {quest.maps::%player's world%::players::*} contains player:

        if {quest.maps::%player's world%::placed-locs::*} does not contain (block's location):
            add block's location to {quest.maps::%player's world%::placed-locs::*}

function questRegen(w: world):
    
    set {quest.maps::%{_w}%::ready} to false

    loop {quest.maps::%{_w}%::placed-locs::*}:
        set block at loop-value to air

    loop {quest.maps::%{_w}%::broken-blocks::*}:
        set block at {quest.maps::%{_w}%::broken-locs::%loop-index%} to loop-value

    removeQuestLoot({_w})

    kill all projectiles in {_w}
    loop all living entities in {_w}:
        if loop-value is not a player:
            kill loop-value
    kill all boats in {_w}
    kill all minecarts in {_w}
    kill all dropped items in {_w}

    set {quest.maps::%{_w}%::ready} to true

# Chat
on chat:
    if {quest.maps::%player's world%::players::*} contains player:
        
        cancel event
        loop {quest.maps::%player's world%::alive::*}:
            if {quest.maps::%player's world%::alive::%loop-index%::*} contains player:
                set {_team} to loop-index
                exit loop
        if {_team} is set:
            send "[&aTeam %{_team}%&f: &b%player%&f] &7%message%" to {quest.maps::%player's world%::teams::%{_team}%::*}
        else:
            send "&CYou cannot talk to your team when you are dead" to player

# Scoreboard
function updateQuestBoard(w: world):

    set {_alive} to 0
    loop {quest.maps::%{_w}%::alive::*}:
        add (size of {quest.maps::%{_w}%::alive::%loop-index-1%::*}) to {_alive}
    set {_secs} to mod({quest.maps::%{_w}%::time}, 60)
    if {_secs} < 10:
        set {_secs} to "0%{_secs}%"

    loop integers between 1 and ({@game-min} / {@team-size}):
        loop {quest.maps::%{_w}%::teams::%loop-integer%::*}:

            set {_p} to {quest.maps::%{_w}%::teams::%loop-integer-1%::%loop-index-1%}
            set {_kills} to {quest.maps::%{_w}%::kills::%{_p}%}
            if {_kills} is not set:
                set {_kills} to 0

            set title of {_p}'s scoreboard to "&3&L--- SurvivalQuest ---"

            set {_line} to 1

            if size of {quest.maps::%{_w}%::teams::%loop-integer-1%::*} > 1:
                
                loop {quest.maps::%{_w}%::teams::%loop-integer-1%::*}:
                    set {_tm} to {quest.maps::%{_w}%::teams::%loop-integer-1%::%loop-index-2%}

                    if {_tm} is not {_p}:

                        if {_tm}'s gamemode is survival:
                            set {_health} to {_tm's health}

                            set line {_line} of {_p}'s scoreboard to "%{_tm}% &B%{_tm}'s health%&B HP"
                        else:
                            set line {_line} of {_p}'s scoreboard to "%{_tm}% &C✗"
                        add 1 to {_line}
                
                set line {_line} of {_p}'s scoreboard to ""
                add 1 to {_line}

            set line {_line} of {_p}'s scoreboard to "&7Emeralds:&R &A♦%amount of emeralds in {_p}'s inventory%"
            add 1 to {_line}
            set line {_line} of {_p}'s scoreboard to "&7Kills:&R %{_kills}%"
            add 1 to {_line}
            set line {_line} of {_p}'s scoreboard to "&7Time:&R &l%floor({quest.maps::%{_w}%::time} / 60)%&l:%{_secs}%"
            add 1 to {_line}
            set line {_line} of {_p}'s scoreboard to "&7Players:&R &l%{_alive}%&l/%size of {quest.maps::%{_w}%::players::*}%"
            add 1 to {_line}
            set line {_line} of {_p}'s scoreboard to ""   

# Commands
command /cleardata:
    trigger:
        clear {quest.lobby::*}
        loop {quest.maps::*}:
            clear {quest.maps::%loop-index-1%::players::*}    
            clear {quest.maps::%loop-index-1%::teams::*}
            clear {quest.maps::%loop-index-1%::alive::*}
            clear {quest.maps::%loop-index-1%::placed-locs::*}
            clear {quest.maps::%loop-index-1%::broken-blocks::*}   
            clear {quest.maps::%loop-index-1%::broken-locs::*}
        send "cleared"

command /survivalquest [<string>] [<string>] [<string>] [<string>] [<string>]:
    aliases: sq
    executable by: players
    trigger:
        if arg-1 is "admin":
            if player has permission "quest.admin":

                if arg-2 is "addWorld":
                    if {quest.maps::*} does not contain player's world:
                        set {quest.maps::%player's world%} to player's world
                        send "Maps: %{quest.maps::*}%"
                        send {@world-created}
                    else:
                        send {@world-exists}
                if arg-2 is "removeWorld":
                    remove players's world from {quest.maps::*}
                    send {@world-removed}
                if arg-2 is "clearMaps":
                    clear {quest.maps::*}
                    send "&CALL THE BLOODY DATA IS NOW GONE!"


                if arg-2 is "setLobbyLoc":
                    set {quest.lobby-loc} to player's location
                    send {@lobby-set}
                if arg-2 is "addSpawnLoc":
                    add player's location to {quest.maps::%player's world%::spawns::*}
                    send {@spawn-added} 
                    send "Total: %{quest.maps::%player's world%::spawns::*}%"
                if arg-2 is "clearSpawnLocs":
                    clear {quest.maps::%player's world%::spawns::*}
                    send {@spawns-cleared}

                if arg-2 is "border":
                    if arg-3 is "start":
                        if arg-4 is not set:
                            send "&6Usage: /sq admin border start [diameter]"
                            stop
                        set {quest.maps::%player's world%::border-start} to arg-4 parsed as integer
                        send "&ABorder start set"
                    if arg-3 is "time":
                        if arg-4 is not set:
                            send "&6Usage: /sq admin border time [time]"
                            stop
                        set {quest.maps::%player's world%::border-time} to arg-4 parsed as integer
                        send "&ABorder time set"

                if arg-2 is "shop":
                    if arg-3 is "add":
                        add player's held item to {quest.shop::*}
                        send "&AItem added to shop"
                    if arg-3 is "set":
                        if arg-4 is not set:
                            send "&6Usage: /sq admin set [id]"
                            stop
                        set {quest.shop::%arg-4%} to player's held item
                        send "&AShop item set"
                    if arg-3 is "remove":
                        if arg-4 is not set:
                            send "&6Usage: /sq admin remove [id]"
                            stop
                        delete {quest.shop::%arg-4%}
                        send "&ARemoved item &f%arg-4%&A from shop"
                    if arg-3 is "price":
                        if arg-5 is not set:
                            send "&6Usage: /sq admin price [id] [price]"
                            stop
                        if arg-4 is not set:
                            send "&6Usage: /sq admin price [id] [price]"
                            stop
                        set 1st line of lore of {quest.shop::%arg-4%} to "&R%arg-5% Emerald(s)"
                        send "&APrice set"
                    if arg-3 is "list":
                        broadcast "Shop items: %{quest.shop::*}%"

                if arg-2 is "loot":
                    if arg-3 is "createbox":
                        if arg-4 is not set:
                            send "&6Usage: /sq admin loot create [rarity]"
                            stop
                        add location of player's target block to {quest.maps::%player's world%::box-locs::*}
                        add (arg-4 parsed as integer) to {quest.maps::%player's world%::box-rarities::*}
                        send "&ALoot box added"
                    if arg-3 is "list":
                        if arg-4 is not set:
                            send "&6Usage: /sq admin loot list <[rarity]|locs>"
                            stop
                        if arg-4 is "locs":
                            send "&NLoot box locations:"
                            loop {quest.maps::%player's world%::box-locs::*}:
                                send "- %loop-value% (&7%{quest.maps::%player's world%::box-rarities::%loop-index%}%)"
                            stop
                        send "&NPossible loot items for rarity %arg-4%"
                        loop {quest.loot.%arg-4%::*}:
                            send "- %loop-value%"
                    if arg-3 is "additem":
                        if arg-4 is not set:
                            send "&6Usage: /sq admin loot additem [rarity]"
                            send "&6Desc: adds the block in your hand to the posibilities for that rarity"
                            stop
                        if player's held item is air:
                            send "&6Air is not a very useful loot item"
                            stop
                        add (player's held item) to {quest.loot.%arg-4%::*}
                        send "&A%player's held item% &Aadded to rarity %arg-4%&A posibilities"
                    if arg-3 is "removeitem":
                        if arg-4 is not set:
                            send "&6Usage: /sq admin loot removeitem [rarity]"
                            stop
                        if {quest.loot.%arg-4%::*} does not contain player's held item:
                            send "&6That item is not part of the rarity %arg-4%&6 loot box"
                            stop
                        remove player's held item from {quest.loot.%arg-4%::*}
                        send "&ARemoved %player's held item%&A from rarity %arg-4%&A posibilities"
                    if arg-3 is "max":
                        if arg-4 is not set:
                            send "&6Usage: /sq admin loot max [rarity] [maximum]"
                            stop
                        if arg-5 is not set:
                            send "&6Usage: /sq admin loot max [rarity] [maximum]"
                            stop
                        set {quest.loot-max.%arg-4%} to arg-5 parsed as integer
                        send "&AMax for rarity %arg-4%&A set to %arg-5%&A. &RPlease ensure that there are sufficient items in the rarity list for that maximum"
                    if arg-3 is "min":
                        if arg-4 is not set:
                            send "&6Usage: /sq admin loot min [rarity] [minimum]"
                            stop
                        if arg-5 is not set:
                            send "&6Usage: /sq admin loot min [rarity] [minimum]"
                            stop
                        set {quest.loot-min.%arg-4%} to arg-5 parsed as integer
                        send "&AMin for rarity %arg-4%&A set to %arg-5%"
                    if arg-3 is "removebox":
                        loop {quest.maps::%player's world%::box-locs::*}:
                            if loop-value is (location of player's target block):
                                set {_loc} to loop-index
                                exit loop
                        if {_loc} is set:
                            delete {quest.maps::%player's world%::box-locs::%{_loc}%}
                            delete {quest.maps::%player's world%::box-rarities::%{_loc}%}
                            send "&ALoot box location removed"
                        else:
                            send "&CThat location was not in the list"

            else:
                send {@perm-deny}

        if arg-1 is "leavelobby":
            if {quest.lobby::*} contains player:
                remove player from {quest.lobby::*}
                send "&AYou left the lobby"
            else:
                send "&6You are not in the lobby"

        if arg-1 is "shop":
            if {quest.maps::%player's world%::players::*} contains player:
                openQuestShop(player)
            else:
                send "&CYou are not in a game"

        if arg-1 is "info":
            send "Maps: %{quest.maps::*}%"
            loop {quest.maps::*}:
                send "Players in %loop-value%/%loop-index%: %{quest.maps::%loop-index%::players::*}%"
                send "Blocks: %size of {quest.maps::%loop-index-1%::placed-locs::*}%, %size of {quest.maps::%loop-index-1%::broken-blocks::*}%, %size of {quest.maps::%loop-index-1%::broken-locs::*}%"
                loop {quest.maps::%loop-index-1%::alive::*}:
                    broadcast "Team %loop-index-2%: %{quest.maps::%loop-index-1%::alive::%loop-index-2%::*}%"